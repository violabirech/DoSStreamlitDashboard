import streamlit as st
import pandas as pd
import numpy as np
import requests
from datetime import datetime
from influxdb_client import InfluxDBClient
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import plotly.express as px
import plotly.figure_factory as ff

# --- Page Setup ---
st.set_page_config(page_title="üöÄ DoS Detection Dashboard", layout="wide")

# --- Configuration ---
API_URL = "https://violabirech-dos-anomalies-detection.hf.space/predict"
INFLUXDB_URL = "https://us-east-1-1.aws.cloud2.influxdata.com"
INFLUXDB_TOKEN = "6gjE97dCC24hgOgWNmRXPqOS0pfc0pMSYeh5psL8e5u2T8jGeV1F17CU-U1z05if0jfTEmPRW9twNPSXN09SRQ=="
INFLUXDB_ORG = "Anormally Detection"
INFLUXDB_BUCKET = "realtime"
INFLUXDB_MEASUREMENT = "network_traffic"

# --- Sidebar Settings ---
st.sidebar.header("Settings")
st.session_state.highlight_color = st.sidebar.selectbox("Anomaly Highlight Color", ["Red", "Orange", "Yellow"], index=0)
enable_alerts = st.sidebar.checkbox("Enable Discord Alerts", value=True)
highlight_rows = st.sidebar.checkbox("Highlight Anomalies", value=True)

# --- Tabs ---
tabs = st.tabs(["üè† Overview", "üì° Live Stream", "üõ† Manual Entry", "üìä Metrics & Alerts"])

# --- InfluxDB Query ---
time_window = "-7d"
client = InfluxDBClient(url=INFLUXDB_URL, token=INFLUXDB_TOKEN, org=INFLUXDB_ORG)
query_api = client.query_api()
query = f'''
from(bucket: "{INFLUXDB_BUCKET}")
  |> range(start: {time_window})
  |> filter(fn: (r) => r._measurement == "{INFLUXDB_MEASUREMENT}")
  |> filter(fn: (r) => r._field == "inter_arrival_time" or r._field == "packet_length" or r._field == "label")
  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> sort(columns: ["_time"])
  |> limit(n:200)
'''

# --- Fetch Data ---
df = query_api.query_data_frame(org=INFLUXDB_ORG, query=query)
if isinstance(df, list):
    df = pd.concat(df, ignore_index=True)

# --- Handle No Data ---
if df.empty or "packet_length" not in df.columns or "inter_arrival_time" not in df.columns:
    tabs[1].warning("‚ö†Ô∏è No valid data found.")
else:
    payloads = df[["inter_arrival_time", "packet_length"]].dropna().to_dict("records")
    predictions = []
    for (index, row), payload in zip(df.iterrows(), payloads):
        try:
            response = requests.post(API_URL, json=payload, timeout=8)
            result = response.json()
            result.update({
                "timestamp": row["_time"],
                "inter_arrival_time": payload["inter_arrival_time"],
                "packet_length": payload["packet_length"],
                "label": row.get("label")
            })
            predictions.append(result)
        except:
            continue

    df_pred = pd.DataFrame(predictions)
    df_pred["timestamp"] = pd.to_datetime(df_pred["timestamp"])

    # --- Overview ---
    with tabs[0]:
        st.title("üöÄ DoS Anomaly Detection Dashboard")
        st.markdown("Analyze real-time DoS traffic using ML prediction API and live visualization.")

    # --- Live Stream ---
    with tabs[1]:
        st.subheader("üì° Real-Time Monitoring")
        if highlight_rows and "anomaly" in df_pred.columns:
            highlight_color = st.session_state.highlight_color.lower()
            def highlight(df):
                return [f"background-color: {highlight_color}" if v == 1 else "" for v in df["anomaly"]]
            st.dataframe(df_pred.style.apply(highlight, axis=1))
        else:
            st.dataframe(df_pred)

    # --- Manual Entry ---
    with tabs[2]:
        st.subheader("üõ† Manual Input")
        col1, col2 = st.columns(2)
        with col1:
            inter_arrival = st.number_input("Inter Arrival Time (sec)", 0.001, 10.0, 0.02)
        with col2:
            packet_length = st.number_input("Packet Length", 1, 5000, 512)

        if st.button("Predict Anomaly"):
            payload = {"inter_arrival_time": inter_arrival, "packet_length": packet_length}
            try:
                r = requests.post(API_URL, json=payload)
                res = r.json()
                st.success("Prediction result:")
                st.json(res)
            except Exception as e:
                st.error(f"Error: {e}")

    # --- Metrics & Alerts ---
    with tabs[3]:
        st.subheader("üìä Model Performance")
        valid = df_pred.dropna(subset=["label", "anomaly"])
        if not valid.empty:
            y_true = valid["label"].astype(int)
            y_pred = valid["anomaly"].astype(int)
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("Accuracy", f"{accuracy_score(y_true, y_pred)*100:.2f}%")
            col2.metric("Precision", f"{precision_score(y_true, y_pred, zero_division=0)*100:.2f}%")
            col3.metric("Recall", f"{recall_score(y_true, y_pred, zero_division=0)*100:.2f}%")
            col4.metric("F1 Score", f"{f1_score(y_true, y_pred, zero_division=0)*100:.2f}%")

            cm = confusion_matrix(y_true, y_pred)
            fig_cm = ff.create_annotated_heatmap(
                z=cm,
                x=["Pred Normal", "Pred Attack"],
                y=["Actual Normal", "Actual Attack"],
                annotation_text=cm.astype(str),
                colorscale="Blues"
            )
            st.plotly_chart(fig_cm, use_container_width=True)

        st.subheader("üìà Reconstruction Error")
        fig = px.line(df_pred, x="timestamp", y="reconstruction_error", color="anomaly",
                      color_discrete_map={0: "blue", 1: "red"})
        st.plotly_chart(fig, use_container_width=True)
